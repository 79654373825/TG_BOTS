# Time Tracker Bot for Telegram with Formatted Duration (m:sec)

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import datetime
import gspread
import telegram
import json
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Google Sheets setup
gc = gspread.service_account(filename=os.getenv('GOOGLE_SERVICE_ACCOUNT_FILE'))
sh = gc.open(os.getenv('GOOGLE_SHEETS_NAME'))
worksheet = sh.sheet1

# Whitelist of allowed users
ALLOWED_USERS = [int(user_id) for user_id in os.getenv('ALLOWED_USERS', '').split(',') if user_id.strip()]

active_sessions = {}
categories = ['üíº –†–∞–±–æ—Ç–∞', 'üèãÔ∏è –°–ø–æ—Ä—Ç', 'üå¥ –û—Ç–¥—ã—Ö', 'üìö –£—á—ë–±–∞', 'üîß –î—Ä—É–≥–æ–µ']
awaiting_category = {}
awaiting_activity_name = {}
awaiting_custom_interval = {}
goals_file = os.getenv('GOALS_FILE', 'goals.json')
record_file = os.getenv('RECORD_FILE', 'record.json')
interval_file = os.getenv('INTERVAL_FILE', 'user_intervals.json')

def load_json(file):
    if os.path.exists(file):
        with open(file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_json(file, data):
    with open(file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def is_user_allowed(user_id):
    return user_id in ALLOWED_USERS

goals = load_json(goals_file)
record = load_json(record_file)
user_intervals = load_json(interval_file)

def get_main_menu(user_id):
    keyboard = []
    if user_id not in active_sessions:
        keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="start_activity")])
    else:
        keyboard.append([InlineKeyboardButton("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="stop_activity")])
    keyboard.append([InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="current_activity")])
    keyboard.append([InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å", callback_data="daily_report")])
    keyboard.append([InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_settings")])
    keyboard.append([InlineKeyboardButton("üéØ –ú–æ—è —Ü–µ–ª—å", callback_data="my_goal")])
    keyboard.append([InlineKeyboardButton("üèÜ –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥", callback_data="personal_best")])
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id):
        await update.effective_chat.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    reply_markup = get_main_menu(user_id)
    best = record.get(str(user_id), "–µ—â—ë –Ω–µ—Ç")
    if user_id in active_sessions:
        start_time = active_sessions[user_id]
        message_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n\n"
            f"üïí –ù–∞—á–∞—Ç–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"üèÜ –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥: {best}\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    else:
        message_text = f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏.\nüèÜ –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥: {best}\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.effective_chat.send_message(message_text, reply_markup=reply_markup, parse_mode='Markdown')

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.data
    if user_id in active_sessions:
        await context.bot.send_message(chat_id=user_id, text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å—ë –µ—â—ë –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
    else:
        await context.bot.send_message(chat_id=user_id, text="üîî –ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    if not is_user_allowed(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    current_time = datetime.datetime.now()

    try:
        if query.data == "start_activity":
            if user_id in active_sessions:
                await query.edit_message_text("‚ùóÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.", reply_markup=get_main_menu(user_id))
            else:
                active_sessions[user_id] = current_time
                await query.edit_message_text(
                    "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç–∞! –ù–∞–∂–º–∏—Ç–µ \"–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                    reply_markup=get_main_menu(user_id)
                )
                minutes = user_intervals.get(str(user_id), 30)
                context.job_queue.run_repeating(send_reminder, interval=minutes*60, first=minutes*60, name=f"reminder_{user_id}", data=user_id)

        elif query.data.startswith("cat_"):
            category = query.data.split("_", 1)[1]
            if awaiting_category.get(user_id):
                context.user_data['category'] = category
                awaiting_category.pop(user_id)
                awaiting_activity_name[user_id] = True
                await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
            else:
                await query.edit_message_text("‚ùóÔ∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=get_main_menu(user_id))

        elif query.data == "stop_activity":
            if user_id in active_sessions:
                start_time = active_sessions.pop(user_id)
                end_time = current_time
                context.user_data['start_time'] = start_time
                context.user_data['end_time'] = end_time
                awaiting_category[user_id] = True
                jobs = context.job_queue.get_jobs_by_name(f"reminder_{user_id}")
                for job in jobs:
                    job.schedule_removal()
                keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in categories]
                await query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=get_main_menu(user_id))

        elif query.data == "current_activity":
            if user_id in active_sessions:
                start_time = active_sessions[user_id]
                await query.edit_message_text(
                    f"üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç–∞ –≤ {start_time}",
                    reply_markup=get_main_menu(user_id)
                )
            else:
                await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.", reply_markup=get_main_menu(user_id))

        elif query.data == "daily_report":
            rows = worksheet.get_all_records()
            today = datetime.datetime.now().strftime('%Y-%m-%d')
            report_lines = []
            for row in rows:
                start_time = row.get('Start Time', '')
                if start_time.startswith(today):
                    report_lines.append(f"- {row['Activity Name']} ({row['Category']}): {row['Duration']}")
            report_text = "üìä –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(report_lines) if report_lines else "‚ùóÔ∏è –°–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            await query.edit_message_text(report_text, reply_markup=get_main_menu(user_id))

        elif query.data == "reminder_settings":
            keyboard = [
                [InlineKeyboardButton("15 –º–∏–Ω", callback_data="set_interval_15")],
                [InlineKeyboardButton("30 –º–∏–Ω", callback_data="set_interval_30")],
                [InlineKeyboardButton("60 –º–∏–Ω", callback_data="set_interval_60")],
                [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="set_custom_interval")]
            ]
            await query.edit_message_text("üîî –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data.startswith("set_interval_"):
            minutes = int(query.data.split("_")[2])
            user_intervals[str(user_id)] = minutes
            save_json(interval_file, user_intervals)
            await query.edit_message_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=get_main_menu(user_id))
            jobs = context.job_queue.get_jobs_by_name(f"reminder_{user_id}")
            for job in jobs:
                job.schedule_removal()
            context.job_queue.run_repeating(send_reminder, interval=minutes*60, first=minutes*60, name=f"reminder_{user_id}", data=user_id)

        elif query.data == "set_custom_interval":
            awaiting_custom_interval[user_id] = True
            await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (1-180):")

        elif query.data == "my_goal":
            goal = goals.get(str(user_id), "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            await query.edit_message_text(f"üéØ –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: {goal}\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=get_main_menu(user_id))
            context.user_data['awaiting_goal'] = True

        elif query.data == "personal_best":
            best = record.get(str(user_id), "–µ—â—ë –Ω–µ—Ç")
            await query.edit_message_text(f"üèÜ –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥: {best} —Å–µ–∫", reply_markup=get_main_menu(user_id))

    except telegram.error.BadRequest as e:
        if "Message is not modified" not in str(e):
            raise e

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    if context.user_data.get('awaiting_goal'):
        goal = update.message.text.strip()
        goals[str(user_id)] = goal
        save_json(goals_file, goals)
        context.user_data['awaiting_goal'] = False
        await update.message.reply_text(f"üéØ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {goal}", reply_markup=get_main_menu(user_id))
    elif awaiting_activity_name.get(user_id):
        activity_name = update.message.text.strip()
        category = context.user_data.get('category', '–î—Ä—É–≥–æ–µ')
        start_time = context.user_data.pop('start_time', datetime.datetime.now())
        end_time = context.user_data.pop('end_time', datetime.datetime.now())
        awaiting_activity_name.pop(user_id)

        duration_seconds = int((end_time - start_time).total_seconds())
        minutes, seconds = divmod(duration_seconds, 60)
        duration_formatted = f"{minutes}:{seconds:02d}"

        worksheet.append_row([activity_name, category, str(start_time), str(end_time), duration_formatted])

        old_record = record.get(str(user_id), 0)
        if duration_seconds > float(old_record):
            record[str(user_id)] = duration_seconds
            save_json(record_file, record)
            record_text = "üèÜ –≠—Ç–æ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!"
        else:
            record_text = f"üèÜ –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥: {old_record} —Å–µ–∫"

        await update.message.reply_text(
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å '{activity_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_formatted}\n{record_text}",
            reply_markup=get_main_menu(user_id)
        )
    elif awaiting_custom_interval.get(user_id):
        try:
            minutes = int(update.message.text.strip())
            if 1 <= minutes <= 180:
                user_intervals[str(user_id)] = minutes
                save_json(interval_file, user_intervals)
                awaiting_custom_interval.pop(user_id)
                await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=get_main_menu(user_id))
                jobs = context.job_queue.get_jobs_by_name(f"reminder_{user_id}")
                for job in jobs:
                    job.schedule_removal()
                context.job_queue.run_repeating(send_reminder, interval=minutes*60, first=minutes*60, name=f"reminder_{user_id}", data=user_id)
            else:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 180 –º–∏–Ω—É—Ç.")
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    else:
        await update.message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_main_menu(user_id))

app = ApplicationBuilder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

app.run_polling()
